#include <iostream>
using namespace std;
class Matrix{    
    int **arr;
    int row;
    int col;
    public:
        Matrix(int Row, int Col);
        ~Matrix();
        void Input();
        void Print();
        Matrix Add(Matrix &);
        Matrix Subtract(Matrix &);
        Matrix strassenMatrix(Matrix &a, Matrix &b, int n);
};

Matrix :: ~Matrix(){
    if(row > 0 && col > 0){        
        for(int i = 0; i < row; i++){
            delete arr[i];
        }
    delete arr;
    }
}

Matrix :: Matrix(int Row, int Col){
    row = Row;
    col = Col;
    arr = new int *[row];
    for (int i = 0; i < row; i++){
        arr[i] = new int[col]{0};
    }
}

void Matrix :: Input(){
    cout<<"Enter elements in matrix:\n";
        for (int i = 0; i < row; i++){   
            cout<<"Enter element in row "<<i+1<<endl;
            for(int j = 0; j < col; j++){
                cin>>arr[i][j];
        }
    }
}

void Matrix :: Print(){
    cout<<"rows are: "<<row<<" columns are: "<<col<<endl;
    cout<<"{";
    for (int i = 0; i < row; i++){   
        cout<<"{";
        for (int j = 0; j < col; j++){
            cout<<" "<<arr[i][j];
            if(j < col-1){
                cout<<",";
            }
        }
        if(i < row-1){
            cout<<"}"<<endl;
        }
        else{
            cout<<"}";
        }   
    }
    cout<<"}"<<endl;
}

Matrix Matrix :: Add(Matrix &b){
    Matrix c(row, col);
    if(row != b.row || col != b.col){
        throw "MATRIX SIZE IS NOT EQUAL!";
    }
    for (int i = 0; i < row; i++){
        for (int j = 0; j < col; j++){
            c.arr[i][j] = arr[i][j] + b.arr[i][j];    
        }
    }   
    return c; 
}

Matrix Matrix :: Subtract(Matrix &b){
    Matrix c(row, col);
    if(row != b.row || col != b.col){
        throw "MATRIX SIZE IS NOT EQUAL!";
    }
    for (int i = 0; i < row; i++){
        for (int j = 0; j < col; j++){
            c.arr[i][j] = arr[i][j] - b.arr[i][j];               
        }
    }
    return c;             
}

Matrix Matrix :: strassenMatrix(Matrix &a, Matrix &b, int n) {
    Matrix result(n, n);
    if (n == 1){
        result.arr[0][0] = a.arr[0][0] * b.arr[0][0];
    } 
    else{
        Matrix a11(n / 2, n / 2), a12(n / 2, n / 2), a21(n / 2, n / 2), a22(n / 2, n / 2);
        Matrix b11(n / 2, n / 2), b12(n / 2, n / 2), b21(n / 2, n / 2), b22(n / 2, n / 2);
        for (int i = 0; i < n / 2; i++){
            for (int j = 0; j < n / 2; j++){
                a11.arr[i][j] = a.arr[i][j];
                a12.arr[i][j] = a.arr[i][j + n / 2];
                a21.arr[i][j] = a.arr[i + n / 2][j];
                a22.arr[i][j] = a.arr[i + n / 2][j + n / 2];

                b11.arr[i][j] = b.arr[i][j];
                b12.arr[i][j] = b.arr[i][j + n / 2];
                b21.arr[i][j] = b.arr[i + n / 2][j];
                b22.arr[i][j] = b.arr[i + n / 2][j + n / 2];
            }
        }

        Matrix s1 = b12.Subtract(b22);
        Matrix s2 = a11.Add(a12);
        Matrix s3 = a21.Add(a22);
        Matrix s4 = b21.Subtract(b11);
        Matrix s5 = a11.Add(a22);
        Matrix s6 = b11.Add(b22);
        Matrix s7 = a12.Subtract(a22);
        Matrix s8 = b21.Add(b22);
        Matrix s9 = a11.Subtract(a21);
        Matrix s10 = b11.Add(b12);

        Matrix p1 = strassenMatrix(a11, s1, n / 2);
        Matrix p2 = strassenMatrix(s2, b22, n / 2);
        Matrix p3 = strassenMatrix(s3, b11, n / 2);
        Matrix p4 = strassenMatrix(a22, s4, n / 2);
        Matrix p5 = strassenMatrix(s5, s6, n / 2);
        Matrix p6 = strassenMatrix(s7, s8, n / 2);
        Matrix p7 = strassenMatrix(s9, s10, n / 2);

        Matrix c11 = p5.Add(p4).Subtract(p2).Add(p6);
        Matrix c12 = p1.Add(p2);
        Matrix c21 = p3.Add(p4);
        Matrix c22 = p5.Add(p1).Subtract(p3).Subtract(p7);

        for(int i = 0; i < n / 2; i++){
            for(int j = 0; j < n / 2; j++){
                result.arr[i][j] = c11.arr[i][j];
                result.arr[i][j + n / 2] = c12.arr[i][j];
                result.arr[i + n / 2][j] = c21.arr[i][j];
                result.arr[i + n / 2][j + n / 2] = c22.arr[i][j];
            }
        }
    }
    return result;
}

int main() {
    while(true){
        cout<<"Enter order of matrix:";
        int n;
        cin>>n;

        Matrix A(n,n);
        Matrix B(n, n);

        cout<<"\nEnter elements for Matrix A:\n\n";
        A.Input();
        cout<<"\nEnter elements for Matrix B:\n\n";
        B.Input();

        cout<<"Matrix A:\n";
        A.Print();
        cout<<endl;
        cout<<"Matrix B:\n";
        B.Print();
        cout<<endl;

        Matrix C = C.strassenMatrix(A, B, n);

        cout<<"\nMatrix A * B using Strassen's algorithm:\n";
        C.Print();

        cout<<"\nChoose 1 to continue:\n";
        cin>>n;
        if(n != 1){
            break;
        }
    }
    return 0;
}
